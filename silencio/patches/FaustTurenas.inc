gi_FaustTurenas_compiled faustcompile {{

//################################### turenas.dsp ########################################
// A simple smart phone percussion based on an additive synthesizer.
//
// ## `SmartKeyboard` Use Strategy
//
// Since the sounds generated by this synth are very short, the strategy here is to take
// advantage of the polyphony capabilities of the iOSKeyboard architecture by creating
// a new voice every time a new key is pressed. Since the `SmartKeyboard` interface has a
// large number of keys here (180), lots of sounds are generated when sliding a
// finger across the keyboard.
//
//
// ## Compilation Instructions
//
// This Faust code will compile fine with any of the standard Faust targets. However
// it was specifically designed to be used with `faust2smartkeyb`. For best results,
// we recommend to use the following parameters to compile it:
//
// ```
// faust2smartkeyb [-ios/-android] turenas.dsp
// ```
//
// ## Version/Licence
//
// Version 0.0, Feb. 2017
// Copyright Romain Michon CCRMA (Stanford University)/GRAME 2017
// MIT Licence: https://opensource.org/licenses/MIT
//########################################################################################

declare name "turenas";

import("stdfaust.lib");

//========================= Smart Keyboard Configuration =================================
// (10 keyboards with 18 keys each configured as a pitch matrix.
//========================================================================================

declare interface "SmartKeyboard{
	'Number of Keyboards':'10',
	'Keyboard 0 - Number of Keys':'18',
	'Keyboard 1 - Number of Keys':'18',
	'Keyboard 2 - Number of Keys':'18',
	'Keyboard 3 - Number of Keys':'18',
	'Keyboard 4 - Number of Keys':'18',
	'Keyboard 5 - Number of Keys':'18',
	'Keyboard 6 - Number of Keys':'18',
	'Keyboard 7 - Number of Keys':'18',
	'Keyboard 8 - Number of Keys':'18',
	'Keyboard 9 - Number of Keys':'18',
	'Keyboard 0 - Lowest Key':'50',
	'Keyboard 1 - Lowest Key':'55',
	'Keyboard 2 - Lowest Key':'60',
	'Keyboard 3 - Lowest Key':'65',
	'Keyboard 4 - Lowest Key':'70',
	'Keyboard 5 - Lowest Key':'75',
	'Keyboard 6 - Lowest Key':'80',
	'Keyboard 7 - Lowest Key':'85',
	'Keyboard 8 - Lowest Key':'90',
	'Keyboard 9 - Lowest Key':'95',
	'Keyboard 0 - Piano Keyboard':'0',
	'Keyboard 1 - Piano Keyboard':'0',
	'Keyboard 2 - Piano Keyboard':'0',
	'Keyboard 3 - Piano Keyboard':'0',
	'Keyboard 4 - Piano Keyboard':'0',
	'Keyboard 5 - Piano Keyboard':'0',
	'Keyboard 6 - Piano Keyboard':'0',
	'Keyboard 7 - Piano Keyboard':'0',
	'Keyboard 8 - Piano Keyboard':'0',
	'Keyboard 9 - Piano Keyboard':'0',
	'Keyboard 0 - Send X':'0',
	'Keyboard 1 - Send X':'0',
	'Keyboard 2 - Send X':'0',
	'Keyboard 3 - Send X':'0',
	'Keyboard 4 - Send X':'0',
	'Keyboard 5 - Send X':'0',
	'Keyboard 6 - Send X':'0',
	'Keyboard 7 - Send X':'0',
	'Keyboard 8 - Send X':'0',
	'Keyboard 9 - Send X':'0'
}";

//================================ Instrument Parameters =================================
// Creates the connection between the synth and the mobile device
//========================================================================================

// SmartKeyboard Y parameter
y = hslider("y",0,0,1,0.01);
// Smart Keyboard frequency parameter
freq = hslider("freq",400,50,2000,0.01);
// SmartKeyboard gate parameter
gate = button("gate");
// mode resonance duration is controlled with the x axis of the accelerometer
res = hslider("res[acc: 0 0 -10 0 10]",2.5,0.01,5,0.01);

//=================================== Parameters Mapping =================================
//========================================================================================

// number of modes
nModes = 6;
// distance between each mode
maxModeSpread = 5;
modeSpread = y*maxModeSpread;
// computing modes frequency ratio
modeFreqRatios = par(i,nModes,1+(i+1)/nModes*modeSpread);
// computing modes gain
minModeGain = 0.3;
modeGains = par(i,nModes,1-(i+1)/(nModes*minModeGain));
// smoothed mode resonance
modeRes = res : si.smoo;

//============================================ DSP =======================================
//========================================================================================

process = sy.additiveDrum(freq,modeFreqRatios,modeGains,0.8,0.001,modeRes,gate)*0.05;

}}, "--import-dir \"/home/mkg/faust/libraries\"", 0

print gi_FaustTurenas_compiled

gk_FaustTurenas_level chnexport "gk_FaustTurenas_level", 3
gk_FaustTurenas_y chnexport "gk_FaustTurenas_y", 3
gk_FaustTurenas_res chnexport "gk_FaustTurenas_res", 3

gk_FaustTurenas_level init 0.
gk_FaustTurenas_y init .22
gk_FaustTurenas_res init 3.93
gk_FaustTurenas_midi_dynamic_range init 20

instr FaustTurenas
i_attack = .005
i_sustain = p3
i_release = .1
xtratim i_attack + i_release
i_instrument = p1
i_time = p2
i_midi_key = p4
i_midi_dynamic_range = i(gk_FaustTurenas_midi_dynamic_range)
i_midi_velocity = p5 * i_midi_dynamic_range / 127 + (63.5 - i_midi_dynamic_range / 2)
k_space_front_to_back = p6
k_space_left_to_right = p7
k_space_bottom_to_top = p8
i_phase = p9
i_frequency = cpsmidinn(i_midi_key)
; Adjust the following value until "overall amps" at the end of performance is about -6 dB.
i_level_correction = 60
i_normalization = ampdb(-i_level_correction) / 2
i_amplitude = ampdb(i_midi_velocity) * i_normalization
k_gain = ampdb(gk_FaustTurenas_level)
i_faust_dsp faustdsp gi_FaustTurenas_compiled
k_frequency cpsmidinn i_midi_key
faustctl i_faust_dsp, "freq", k_frequency
faustctl i_faust_dsp, "y", gk_FaustTurenas_y
faustctl i_faust_dsp, "res", gk_FaustTurenas_res
faustctl i_faust_dsp, "gate", k(1)
a_signal faustplay i_faust_dsp
a_declicking linsegr 0, i_attack, 1, i_sustain, 1, i_release, 0
a_signal = a_signal * i_amplitude * a_declicking * k_gain

#ifdef USE_SPATIALIZATION
a_spatial_reverb_send init 0
a_bsignal[] init 16
a_bsignal, a_spatial_reverb_send Spatialize a_signal, k_space_front_to_back, k_space_left_to_right, k_space_bottom_to_top
outletv "outbformat", a_bsignal
outleta "out", a_spatial_reverb_send
#else
a_out_left, a_out_right pan2 a_signal, k_space_left_to_right
outleta "outleft", a_out_left
outleta "outright", a_out_right
#endif
prints "%-24.24s i %9.4f t %9.4f d %9.4f k %9.4f v %9.4f p %9.4f #%3d\n", nstrstr(p1), p1, p2, p3, p4, p5, p7, active(p1)
endin



