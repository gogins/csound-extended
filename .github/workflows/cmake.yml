name: CMake

on:
  push:
    branches: 
      - master
      - develop
  pull_request:
    branches: 
      - develop

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo
  # This will change for later macOS versions, to /opt/homebrew.
  HOMEBREW_PREFIX: /usr/local
jobs:
  build:
    runs-on: ${{ matrix.config.os }} 
    strategy:
      fail-fast: false
      matrix:
        config:
        - name: "macOS Latest Clang"
          os: macos-latest
          cc: "clang"
          cxx: "clang++"
        - name: "Ubuntu Latest GCC"
          os: ubuntu-latest
          cc: "gcc"
          cxx: "g++"
        - name: "Windows Latest MSVC"
          os: windows-latest
          cc: "cl"
          cxx: "cl"
          environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
                
      - name: Install boost on macOS
        uses: MarkusJx/install-boost@v2.3.0
        id: install-boost-macos
        if: runner.os == 'macOS' 
        with:
          # REQUIRED: Specify the required boost version
          # A list of supported versions can be found here: 
          # https://github.com/actions/boost-versions/blob/main/versions-manifest.json
          boost_version: 1.79.0
          # OPTIONAL: Specify a platform version
          platform_version: 11
          # OPTIONAL: Specify a custom install location
          # boost_install_dir: /home/runner/some_directory
          # OPTIONAL: Specify a toolset
          toolset: clang    

      - name: Install boost on Linux
        uses: MarkusJx/install-boost@v2.3.0
        id: install-boost-linux
        if: runner.os == 'Linux' 
        with:
          # REQUIRED: Specify the required boost version
          # A list of supported versions can be found here: 
          # https://github.com/actions/boost-versions/blob/main/versions-manifest.json
          boost_version: 1.79.0
          # OPTIONAL: Specify a platform version
          platform_version: 20.04
          # OPTIONAL: Specify a custom install location
          # boost_install_dir: /home/runner/some_directory
          # OPTIONAL: Specify a toolset
          toolset: gcc    

      - name: Install boost on Windows
        uses: MarkusJx/install-boost@v2.3.0
        id: install-boost-windows
        if: runner.os == 'Windows' 
        with:
          # REQUIRED: Specify the required boost version
          # A list of supported versions can be found here: 
          # https://github.com/actions/boost-versions/blob/main/versions-manifest.json
          boost_version: 1.79.0
          # OPTIONAL: Specify a platform version
          platform_version: 2022
          # OPTIONAL: Specify a custom install location
          # boost_install_dir: /home/runner/some_directory
          # OPTIONAL: Specify a toolset
          toolset: msvc    
          link: shared      
          
      - name: Build on Mac OS
        # Most homebrew packages can be found in ${HOMEBREW_PREFIX}/opt.
        if: runner.os == 'macOS'
        run: |
          echo "Installing tools..."
          brew update
          brew install graphviz
          brew install doxygen
          brew install libsndfile
          brew install csound
          brew install eigen
          brew install opencv
          echo "Updating all git submodules..."
          git submodule update --init --recursive
          git submodule status --recursive
          echo "Environment:"
          env
          echo "Finished updating all git submodules."
          echo "Trying to find csdl.h..."
          find /opt/runner . -name "csdl.h" -ls 2>/dev/null
          find /Users/runner . -name "csdl.h" -ls 2>/dev/null
          find /usr . -name "csdl.h" -ls 2>/dev/null
          echo "Trying to find csnd6 library..."
          find /opt/runner . -name "*csnd*" -ls 2>/dev/null
          find /Users/runner . -name "*csnd*" -ls 2>/dev/null
          find /usr . -name "*csnd*" -ls 2>/dev/null
          # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBOOST_ROOT=${{ steps.install-boost-macos.outputs.BOOST_ROOT }}
          # Build with CMake.
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
          echo "Documenting..."
          doxygen
          echo "Packaging..."
          cd build
          cpack -V

      - name: Build on Linux
        if: runner.os == 'Linux'
        run: |
          echo "Installing tools..."
          sudo apt-get update
          sudo apt-get install graphviz
          sudo apt-get install doxygen
          sudo apt-get install libsndfile1-dev
          sudo apt-get install csound
          sudo apt-get install libcsound64-dev
          sudo apt-get install libcsnd6-6.0v5
          sudo apt-get install libopencv-dev
          echo "Environment:"
          env
          echo "Trying to find csdl.h..."
          #find /opt/runner . -name "csdl.h" -ls 2>/dev/null
          find /home/runner . -name "csdl.h" -ls 2>/dev/null
          find /usr . -name "csdl.h" -ls 2>/dev/null
          echo "Trying to find csnd6 library..."
          #find /opt/runner . -name "*csnd*" -ls 2>/dev/null
          find /home/runner . -name "*csnd*" -ls 2>/dev/null
          find /usr . -name "*csnd*" -ls 2>/dev/null
          echo "Trying to find all CMake package config files..."
          find /home/runner . -name "*onfig.cmake" -ls 2>/dev/null
          find /usr . -name "*onfig.cmake" -ls 2>/dev/null
          echo "Updating all git submodules..."
          git submodule update --init --recursive
          git submodule status --recursive
          echo "Finished updating all git submodules."
          find /usr . -name "*csnd*" -ls 2>/dev/null
          # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBOOST_ROOT=${{ steps.install-boost-linux.outputs.BOOST_ROOT }} -DCSND6_LIBRARY=/usr/lib/libcsnd6.so.6.0
          ##-DCMAKE_TOOLCHAIN_FILE=C:\path\to\vcpkg\scripts\buildsystems\vcpkg.cmake
          # Build with CMake.
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} 
          echo "Documenting..."
          doxygen
          echo "Packaging..."
          cd build
          cpack -V

      - name: Build on Windows
        if: runner.os == 'Windows'
        run: |
          echo "Installing tools..."
          choco install graphviz -y
          choco install doxygen -y
          echo "Installing dependencies..."
          vcpkg install --triplet x64-windows libsndfile
          choco install --triplet x64-windows opencv
          echo "Environment:"
          env
          git clone "https://github.com/csound/csound.git"
          cd csound
          mkdir -p build
          cd build
          cmake .. -DUSE_VCPKG=YES -DVCPKG_TRIPLET=x64-windows
          make
          cd ..
          cd ..
          pwd
          refreshenv
          echo "Updating all git submodules..."
          git submodule update --init --recursive
          git submodule status --recursive
          echo "Finished updating all git submodules."
          # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBOOST_ROOT=${{ steps.install-boost-windows.outputs.BOOST_ROOT }}
          # Build with CMake.
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
          dir ${{github.workspace}}/build/Release
          echo "Documenting..."
          doxygen
          echo "Packaging..."
          cd build
          cpack -V
          dir 

      - uses: "marvinpinto/action-automatic-releases@latest"
        if: runner.os == 'macOS'
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "macos-latest"
          prerelease: true
          title: "Mac OS Development Release"
          files: |
            LICENSE
            README.md
            ${{github.workspace}}/build/*.zip
 
      - uses: "marvinpinto/action-automatic-releases@latest"
        if: runner.os == 'Linux'
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "linux-latest"
          prerelease: true
          title: "Linux Development Release"
          files: |
            LICENSE
            README.md
            ${{github.workspace}}/build/*.zip
          
      - uses: "marvinpinto/action-automatic-releases@latest"
        if: runner.os == 'Windows'
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "windows-latest"
          prerelease: true
          title: "Windows Development Release"
          files: |
            LICENSE
            README.md
            build/*.zip



